/**
 * Kendo-API
 * Kendo API is built around REST. Our API has predictable, resource-oriented URLs, and uses HTTP response codes to indicate API errors.<br>         your API key can be retrieved from your <a href=\"/accountetl\" target=\"_blank\">account Integration menu</a> on the web dashboard<br>         This API key is unique and linked to your account under your email address.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: kendoemailfind@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import localVarRequest = require('request');
import http = require('http');
import Promise = require('bluebird');

let defaultBasePath = 'https://localhost';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

/* tslint:disable:no-unused-variable */
let primitives = [
                    "string",
                    "boolean",
                    "double",
                    "integer",
                    "long",
                    "float",
                    "number",
                    "any"
                 ];

class ObjectSerializer {

    public static findCorrectType(data: any, expectedType: string) {
        if (data == undefined) {
            return expectedType;
        } else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        } else if (expectedType === "Date") {
            return expectedType;
        } else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }

            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }

            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            } else {
                if (data[discriminatorProperty]) {
                    return data[discriminatorProperty]; // use the type given in the discriminator
                } else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }

    public static serialize(data: any, type: string) {
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.serialize(date, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return data.toString();
        } else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }

            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance: {[index: string]: any} = {};
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }

    public static deserialize(data: any, type: string) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.deserialize(date, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return new Date(data);
        } else {
            if (enumsMap[type]) {// is Enum
                return data;
            }

            if (!typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}

export class CompanyProfile {
    /**
    * Full Name of the company
    */
    'name'?: string;
    /**
    * industry
    */
    'industry'?: string;
    /**
    * number of employees
    */
    'employees'?: number;
    /**
    * stock ticker
    */
    'ticker'?: string;
    /**
    * company size
    */
    'size'?: string;
    /**
    * annual revenue in usd
    */
    'revenue'?: number;
    /**
    * LinkedIn URL (i.e. uber)
    */
    'linkedin'?: string;
    /**
    * Facebook URL (i.e. zuck)
    */
    'facebook'?: string;
    /**
    * Twitter URL (i.e. facebook)
    */
    'twitter'?: string;
    /**
    * crunchbase URL (i.e. zuck)
    */
    'crunchbase'?: string;
    'countrycode'?: string;
    'address'?: string;
    'postalcode'?: string;
    'description'?: string;
    'founded'?: number;
    'statecode'?: string;
    /**
    * An array of keywords commonly associated with the company.
    */
    'keywords'?: Array<string>;
    'emails'?: string;
    'city'?: string;
    'domain'?: string;
    'phone'?: string;
    /**
    * remaining credits
    */
    'credit'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "industry",
            "baseName": "industry",
            "type": "string"
        },
        {
            "name": "employees",
            "baseName": "employees",
            "type": "number"
        },
        {
            "name": "ticker",
            "baseName": "ticker",
            "type": "string"
        },
        {
            "name": "size",
            "baseName": "size",
            "type": "string"
        },
        {
            "name": "revenue",
            "baseName": "revenue",
            "type": "number"
        },
        {
            "name": "linkedin",
            "baseName": "linkedin",
            "type": "string"
        },
        {
            "name": "facebook",
            "baseName": "facebook",
            "type": "string"
        },
        {
            "name": "twitter",
            "baseName": "twitter",
            "type": "string"
        },
        {
            "name": "crunchbase",
            "baseName": "crunchbase",
            "type": "string"
        },
        {
            "name": "countrycode",
            "baseName": "countrycode",
            "type": "string"
        },
        {
            "name": "address",
            "baseName": "address",
            "type": "string"
        },
        {
            "name": "postalcode",
            "baseName": "postalcode",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "founded",
            "baseName": "founded",
            "type": "number"
        },
        {
            "name": "statecode",
            "baseName": "statecode",
            "type": "string"
        },
        {
            "name": "keywords",
            "baseName": "keywords",
            "type": "Array<string>"
        },
        {
            "name": "emails",
            "baseName": "emails",
            "type": "string"
        },
        {
            "name": "city",
            "baseName": "city",
            "type": "string"
        },
        {
            "name": "domain",
            "baseName": "domain",
            "type": "string"
        },
        {
            "name": "phone",
            "baseName": "phone",
            "type": "string"
        },
        {
            "name": "credit",
            "baseName": "credit",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return CompanyProfile.attributeTypeMap;
    }
}

export class PersonEmail {
    'privateEmail'?: string;
    'workEmail'?: string;
    'suggestEmail'?: string;
    'phone'?: string;
    /**
    * remaining credits
    */
    'credit'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "privateEmail",
            "baseName": "private_email",
            "type": "string"
        },
        {
            "name": "workEmail",
            "baseName": "work_email",
            "type": "string"
        },
        {
            "name": "suggestEmail",
            "baseName": "suggest_email",
            "type": "string"
        },
        {
            "name": "phone",
            "baseName": "phone",
            "type": "string"
        },
        {
            "name": "credit",
            "baseName": "credit",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return PersonEmail.attributeTypeMap;
    }
}

export class PersonProfile {
    /**
    * Full Name of the person
    */
    'fullname'?: string;
    /**
    * LinkedIn URL (i.e. williamhgates)
    */
    'linkedin'?: string;
    /**
    * Facebook URL (i.e. zuck)
    */
    'facebook'?: string;
    /**
    * Twitter URL (i.e. zuck)
    */
    'twitter'?: string;
    'privateEmail'?: string;
    'workEmail'?: string;
    'suggestEmail'?: string;
    'countrycode'?: string;
    'statecode'?: string;
    'companyName'?: string;
    'title'?: string;
    'companydomain'?: string;
    'phone'?: string;
    /**
    * remaining credits
    */
    'credit'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "fullname",
            "baseName": "fullname",
            "type": "string"
        },
        {
            "name": "linkedin",
            "baseName": "linkedin",
            "type": "string"
        },
        {
            "name": "facebook",
            "baseName": "facebook",
            "type": "string"
        },
        {
            "name": "twitter",
            "baseName": "twitter",
            "type": "string"
        },
        {
            "name": "privateEmail",
            "baseName": "private_email",
            "type": "string"
        },
        {
            "name": "workEmail",
            "baseName": "work_email",
            "type": "string"
        },
        {
            "name": "suggestEmail",
            "baseName": "suggest_email",
            "type": "string"
        },
        {
            "name": "countrycode",
            "baseName": "countrycode",
            "type": "string"
        },
        {
            "name": "statecode",
            "baseName": "statecode",
            "type": "string"
        },
        {
            "name": "companyName",
            "baseName": "company_name",
            "type": "string"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        },
        {
            "name": "companydomain",
            "baseName": "companydomain",
            "type": "string"
        },
        {
            "name": "phone",
            "baseName": "phone",
            "type": "string"
        },
        {
            "name": "credit",
            "baseName": "credit",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return PersonProfile.attributeTypeMap;
    }
}

export class VerifyResults {
    'status'?: VerifyResults.StatusEnum;
    /**
    * remaining credits
    */
    'credit'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "status",
            "baseName": "status",
            "type": "VerifyResults.StatusEnum"
        },
        {
            "name": "credit",
            "baseName": "credit",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return VerifyResults.attributeTypeMap;
    }
}

export namespace VerifyResults {
    export enum StatusEnum {
        Valid = <any> 'valid',
        Invalid = <any> 'invalid',
        Catchall = <any> 'catchall',
        Error = <any> 'error'
    }
}

let enumsMap: {[index: string]: any} = {
        "VerifyResults.StatusEnum": VerifyResults.StatusEnum,
}

let typeMap: {[index: string]: any} = {
    "CompanyProfile": CompanyProfile,
    "PersonEmail": PersonEmail,
    "PersonProfile": PersonProfile,
    "VerifyResults": VerifyResults,
}

export interface Authentication {
    /**
    * Apply authentication settings to header and query params.
    */
    applyToRequest(requestOptions: localVarRequest.Options): void;
}

export class HttpBasicAuth implements Authentication {
    public username: string = '';
    public password: string = '';

    applyToRequest(requestOptions: localVarRequest.Options): void {
        requestOptions.auth = {
            username: this.username, password: this.password
        }
    }
}

export class ApiKeyAuth implements Authentication {
    public apiKey: string = '';

    constructor(private location: string, private paramName: string) {
    }

    applyToRequest(requestOptions: localVarRequest.Options): void {
        if (this.location == "query") {
            (<any>requestOptions.qs)[this.paramName] = this.apiKey;
        } else if (this.location == "header" && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    }
}

export class OAuth implements Authentication {
    public accessToken: string = '';

    applyToRequest(requestOptions: localVarRequest.Options): void {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
        }
    }
}

export class VoidAuth implements Authentication {
    public username: string = '';
    public password: string = '';

    applyToRequest(_: localVarRequest.Options): void {
        // Do nothing
    }
}

export enum CompanyApiApiKeys {
}

export class CompanyApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: CompanyApiApiKeys, value: string) {
        (this.authentications as any)[CompanyApiApiKeys[key]].apiKey = value;
    }
    /**
     * get full company profile by domain
     * @param apikey Api key obtained from kendo
     * @param domain The company domain to look up.
     * @param {*} [options] Override http request options.
     */
    public companybydomainGet (apikey: string, domain: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: CompanyProfile;  }> {
        const localVarPath = this.basePath + '/companybydomain';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'apikey' is not null or undefined
        if (apikey === null || apikey === undefined) {
            throw new Error('Required parameter apikey was null or undefined when calling companybydomainGet.');
        }

        // verify required parameter 'domain' is not null or undefined
        if (domain === null || domain === undefined) {
            throw new Error('Required parameter domain was null or undefined when calling companybydomainGet.');
        }

        if (apikey !== undefined) {
            localVarQueryParameters['apikey'] = ObjectSerializer.serialize(apikey, "string");
        }

        if (domain !== undefined) {
            localVarQueryParameters['domain'] = ObjectSerializer.serialize(domain, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: CompanyProfile;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "CompanyProfile");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * get full company profile by company name
     * @param apikey Api key obtained from kendo
     * @param name The company name to look up.
     * @param {*} [options] Override http request options.
     */
    public companybynameGet (apikey: string, name: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: CompanyProfile;  }> {
        const localVarPath = this.basePath + '/companybyname';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'apikey' is not null or undefined
        if (apikey === null || apikey === undefined) {
            throw new Error('Required parameter apikey was null or undefined when calling companybynameGet.');
        }

        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling companybynameGet.');
        }

        if (apikey !== undefined) {
            localVarQueryParameters['apikey'] = ObjectSerializer.serialize(apikey, "string");
        }

        if (name !== undefined) {
            localVarQueryParameters['name'] = ObjectSerializer.serialize(name, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: CompanyProfile;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "CompanyProfile");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum EmailApiApiKeys {
}

export class EmailApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: EmailApiApiKeys, value: string) {
        (this.authentications as any)[EmailApiApiKeys[key]].apiKey = value;
    }
    /**
     * get person email by providing linkedin profile id
     * @param apikey Api key obtained from kendo
     * @param linkedin linkedin profile ID
     * @param {*} [options] Override http request options.
     */
    public emailbylinkedinGet (apikey: string, linkedin: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: PersonEmail;  }> {
        const localVarPath = this.basePath + '/emailbylinkedin';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'apikey' is not null or undefined
        if (apikey === null || apikey === undefined) {
            throw new Error('Required parameter apikey was null or undefined when calling emailbylinkedinGet.');
        }

        // verify required parameter 'linkedin' is not null or undefined
        if (linkedin === null || linkedin === undefined) {
            throw new Error('Required parameter linkedin was null or undefined when calling emailbylinkedinGet.');
        }

        if (apikey !== undefined) {
            localVarQueryParameters['apikey'] = ObjectSerializer.serialize(apikey, "string");
        }

        if (linkedin !== undefined) {
            localVarQueryParameters['linkedin'] = ObjectSerializer.serialize(linkedin, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PersonEmail;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "PersonEmail");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * get person email by person name and company
     * @param apikey Api key obtained from kendo
     * @param name person full name to look up.
     * @param company company name to look up.
     * @param domain company domain to look up.
     * @param {*} [options] Override http request options.
     */
    public emailbynameGet (apikey: string, name: string, company?: string, domain?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: PersonEmail;  }> {
        const localVarPath = this.basePath + '/emailbyname';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'apikey' is not null or undefined
        if (apikey === null || apikey === undefined) {
            throw new Error('Required parameter apikey was null or undefined when calling emailbynameGet.');
        }

        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling emailbynameGet.');
        }

        if (apikey !== undefined) {
            localVarQueryParameters['apikey'] = ObjectSerializer.serialize(apikey, "string");
        }

        if (name !== undefined) {
            localVarQueryParameters['name'] = ObjectSerializer.serialize(name, "string");
        }

        if (company !== undefined) {
            localVarQueryParameters['company'] = ObjectSerializer.serialize(company, "string");
        }

        if (domain !== undefined) {
            localVarQueryParameters['domain'] = ObjectSerializer.serialize(domain, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PersonEmail;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "PersonEmail");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Check if email address is valid.
     * @param apikey Api key obtained from kendo
     * @param email email to lookup
     * @param {*} [options] Override http request options.
     */
    public verifyemailGet (apikey: string, email: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: VerifyResults;  }> {
        const localVarPath = this.basePath + '/verifyemail';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'apikey' is not null or undefined
        if (apikey === null || apikey === undefined) {
            throw new Error('Required parameter apikey was null or undefined when calling verifyemailGet.');
        }

        // verify required parameter 'email' is not null or undefined
        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling verifyemailGet.');
        }

        if (apikey !== undefined) {
            localVarQueryParameters['apikey'] = ObjectSerializer.serialize(apikey, "string");
        }

        if (email !== undefined) {
            localVarQueryParameters['email'] = ObjectSerializer.serialize(email, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: VerifyResults;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "VerifyResults");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum ProfileApiApiKeys {
}

export class ProfileApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: ProfileApiApiKeys, value: string) {
        (this.authentications as any)[ProfileApiApiKeys[key]].apiKey = value;
    }
    /**
     * get person profile by email
     * @param apikey Api key obtained from kendo
     * @param email The email address to look up.
     * @param {*} [options] Override http request options.
     */
    public profilebyemailGet (apikey: string, email: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: PersonProfile;  }> {
        const localVarPath = this.basePath + '/profilebyemail';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'apikey' is not null or undefined
        if (apikey === null || apikey === undefined) {
            throw new Error('Required parameter apikey was null or undefined when calling profilebyemailGet.');
        }

        // verify required parameter 'email' is not null or undefined
        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling profilebyemailGet.');
        }

        if (apikey !== undefined) {
            localVarQueryParameters['apikey'] = ObjectSerializer.serialize(apikey, "string");
        }

        if (email !== undefined) {
            localVarQueryParameters['email'] = ObjectSerializer.serialize(email, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PersonProfile;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "PersonProfile");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * get person profile by linkedin profile id
     * @param apikey Api key obtained from kendo
     * @param linkedin linkedin profile ID
     * @param {*} [options] Override http request options.
     */
    public profilebylinkedinGet (apikey: string, linkedin: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: PersonProfile;  }> {
        const localVarPath = this.basePath + '/profilebylinkedin';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'apikey' is not null or undefined
        if (apikey === null || apikey === undefined) {
            throw new Error('Required parameter apikey was null or undefined when calling profilebylinkedinGet.');
        }

        // verify required parameter 'linkedin' is not null or undefined
        if (linkedin === null || linkedin === undefined) {
            throw new Error('Required parameter linkedin was null or undefined when calling profilebylinkedinGet.');
        }

        if (apikey !== undefined) {
            localVarQueryParameters['apikey'] = ObjectSerializer.serialize(apikey, "string");
        }

        if (linkedin !== undefined) {
            localVarQueryParameters['linkedin'] = ObjectSerializer.serialize(linkedin, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PersonProfile;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "PersonProfile");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
